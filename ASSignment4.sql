-- Query 1
SELECT D.DEPARTMENT_ID,D.DEPARTMENT_NAME,AVG(SALARY) AS Average_Salary ,COUNT(DEPARTMENT_NAME)AS Number_employess FROM DEPARTMENTS D
JOIN EMPLOYEES E ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
GROUP BY   D.DEPARTMENT_ID,D.DEPARTMENT_NAME
HAVING  AVG(SALARY) >5000 AND COUNT(DEPARTMENT_NAME)<10
ORDER BY  D.DEPARTMENT_ID;


---- queary 2

CREATE VIEW AVERAGE_SALARIES AS
SELECT D.DEPARTMENT_ID,AVG(SALARY) AS Average_Salary  FROM DEPARTMENTS D
JOIN EMPLOYEES E ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
GROUP BY   D.DEPARTMENT_ID
ORDER BY  D.DEPARTMENT_ID;

-- QUERY 3
CREATE VIEW COUNT_EMPLOYEES AS
SELECT D.DEPARTMENT_ID,COUNT(DEPARTMENT_NAME)AS EMPLOYEE_COUNT FROM DEPARTMENTS D
JOIN EMPLOYEES E ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
GROUP BY   D.DEPARTMENT_ID
ORDER BY  D.DEPARTMENT_ID;


-- Queary 4

CREATE OR REPLACE  FUNCTION FULL_NAME
(p_employee_id IN employees.employee_id%TYPE)
RETURN VARCHAR
IS
v_FullName VARCHAR(60);
BEGIN
SELECT (FIRST_NAME ||' '|| LAST_NAME) INTO v_FullName FROM EMPLOYEES
WHERE employee_id =p_employee_id; RETURN v_FullName;
END FULL_NAME;

-- Queary 5

CREATE OR REPLACE PROCEDURE IncreaseSalary ( p_employee_id IN
employees.employee_id%TYPE ) IS
BEGIN
UPDATE employees
SET salary = salary * 1.1
WHERE (SELECT MANAGER_ID FROM EMPLOYEES
WHERE employee_id = p_employee_id)=EMPLOYEE_ID ;
END IncreaseSalary;
--execute IncreaseSalary(109);

-- Queary 6


CREATE TABLE PROJECT (
Manager_id  NUMBER(6) NOT NULL, 
Duration_Day  NUMBER(20),
cost number(20), 
PRIMARY KEY (Manager_id )
);
CREATE OR REPLACE TRIGGER update_salary
BEFORE INSERT OR UPDATE OF Manager_id ON PROJECT FOR EACH ROW BEGIN
SELECT SUM(SALARY) AS Sum_Salary FROM EMPLOYEES
WHERE  :old.Manager_id = :new.Manager_id
  IF  
   :cost=:new.cost <500
   AND :new.cost < Sum_Salary 
    END IF;
    END;

   
   
   
   
    